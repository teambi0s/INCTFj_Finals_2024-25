from gmpy2 import isqrt
from gmpy2 import is_square
from Crypto.Util.number import long_to_bytes

with open('output.txt', 'r') as output_file:
    cipher = int(output_file.readline().lstrip("cipher: "), 16)
    e = int(output_file.readline().lstrip("e: "), 16)
    leak = output_file.readline().lstrip("leak: ")
    
N1, N2 = leak.split(", ")
N1 = int(N1, 16)
N2 = int(N2, 16)

def factor(n):
    a = isqrt(n)
    b2 = a**2 - n

    while not is_square(b2):
        b2 += 2*a + 1
        a += 1

    p = int(a - isqrt(b2))
    q = int(a + isqrt(b2))

    assert p * q == n
    return p, q
    
L = sorted(factor(N2) + factor(N1), reverse=True)
e = 0x10001

for i in range(3):
    p, q = L[i], L[i+1]
    N = p*q
    phi = (p-1)*(q-1)
    d = pow(e,-1, phi)
    cipher = pow(cipher, d, N)

print(long_to_bytes(cipher).decode())